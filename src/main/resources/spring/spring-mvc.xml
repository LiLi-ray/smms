<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--1.扫描包
    默认情况下，<context:component-scan>查找使用构造型（stereotype）注解所标注的类，
    如@Component(组件)，@Service（服务），@Controller（控制器），@Repository（数据仓库）
    基于注解的Bean管理，创建对象-->
    <context:component-scan base-package="controller"/>

    <!--Spring MVC 将接收到的所有请求都看作是一个普通的请求，
    包括对于静态资源的请求。Spring MVC 在全局配置文件中提供了一个<mvc:default-servlet-handler/>标签。
    在 WEB 容器启动的时候会在上下文中定义一个 DefaultServletHttpRequestHandler，
    它会对DispatcherServlet的请求进行处理，如果该请求已经作了映射，那么会接着交给后台对应的处理程序，
    如果没有作映射，就交给 WEB 应用服务器默认的 Servlet 处理，
    从而找到对应的静态资源，只有再找不到资源时才会报错。-->
    <!--若将 DispatcherServlet 请求映射配置为 /，
       则 Spring MVC 将捕获WEB 容器的所有请求，
       包括静态资源的请求，而静态资源又没有映射或者说 静态资源不需要映射
       SpringMVC 会将他们当成一个普通请求处理，因找不到对应处理器将导致错误

       是否被springmvc映射过
       2.静态资源过滤-->
    <!--2.静态资源过滤      解决静态资源访问的问题-->
    <mvc:default-servlet-handler/>


    <!--
    ————解决了@Controller注解的使用前提配置<context:annotation-config/>是对包进行扫描，
    实现注释驱动Bean定义，同时将bean自动注入容器中使用。
    即解决了@Controller标识的类的bean的注入和使用。
    ————加入<mvc:default-servlet-handler/>后，requestMapping会失效
    -->
    <!--对于使用@RequestMapping方式配置的处理器这时候是没用的。
    因为没有相应的HandlerMapping和HandlerAdapter支持注解的使用。
    这时候可以使用<mvc:annotation-driven/>配置在容器中注册支持@RequestMapping注解的组件-->

    <!--3.注解驱动
        <mvc:annotation-driven>
        会自动注册RequestMappingHandlerMapping
        与RequestMappingHandlerAdapter两个Bean
        自定义转换器-->
    <!--3.注解驱动-->
    <mvc:annotation-driven/>

    <!--一般会用来 解析JSP视图，把方法返回值解析为实际的物理视图-->
    <!--4.视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

</beans>